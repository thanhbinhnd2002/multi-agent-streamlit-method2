# ‚úÖ tk_app.py ‚Äî Giao di·ªán m√¥ ph·ªèng ƒë·∫πp h∆°n v·ªõi tkinter, h·ªó tr·ª£ v·∫Ω m·∫°ng v√† t√¥ m√†u gene OncoKB

import tkinter as tk
from tkinter import filedialog, ttk, messagebox
import pandas as pd
import os
import sys
import networkx as nx
import matplotlib.pyplot as plt
from matplotlib.backends.backend_tkagg import FigureCanvasTkAgg
# import c√°c th∆∞ vi·ªán n·∫±m ngo√†i file ch√≠nh
import os
import numpy as np
from joblib import Parallel, delayed
from multiprocessing import cpu_count

sys.path.append(os.path.abspath(".."))

from Simulate.Simulate_Model_Method_2 import import_network, simulate
from functions.Compare import match_with_oncokb_pubmed

if False:
    import matplotlib
    import matplotlib.backends.backend_tkagg
    import joblib
    import openpyxl
    import tqdm
    import PIL._tkinter_finder

# ‚úÖ C·∫•u h√¨nh ƒë∆∞·ªùng d·∫´n n·∫øu ch·∫°y b·∫±ng file .exe
if getattr(sys, 'frozen', False):
    # ƒê∆∞·ªùng d·∫´n th·ª±c thi khi ch·∫°y exe
    BASE_DIR = os.path.dirname(sys.executable)
else:
    BASE_DIR = os.path.dirname(os.path.abspath(__file__))

FONT = ("Segoe UI", 10)
BTN_STYLE = {"font": FONT, "bg": "#E0E0E0", "activebackground": "#D0D0D0", "relief": "raised"}


class SimulationApp:
    def __init__(self, root):
        self.root = root
        self.root.title("Multi-agent Outside Competitive Dynamics Model")
        self.root.geometry("1150x680")

        self.network_path = None
        self.network_graph = None
        self.result_df = None
        self.matched_df = None

        # Frame tr√°i: ƒëi·ªÅu khi·ªÉn
        control_frame = tk.Frame(root, padx=15, pady=15, bg="#F5F5F5")
        control_frame.pack(side=tk.LEFT, fill=tk.Y)

        tk.Label(control_frame, text="Ch·ªçn file m·∫°ng .txt", font=("Segoe UI", 11, "bold"), bg="#F5F5F5").pack(anchor="w", pady=(0, 3))
        tk.Button(control_frame, text="üìÇ Ch·ªçn file m·∫°ng", command=self.choose_file, **BTN_STYLE).pack(fill="x")
        self.file_label = tk.Label(control_frame, text="Ch∆∞a ch·ªçn file", fg="#1a73e8", font=FONT, bg="#F5F5F5")
        self.file_label.pack(anchor="w", pady=(0, 6))
        self.draw_btn = tk.Button(control_frame, text="üì° V·∫Ω m·∫°ng", command=self.draw_network, state=tk.DISABLED, **BTN_STYLE)
        self.draw_btn.pack(fill="x", pady=(0, 15))

        # Tham s·ªë
        tk.Label(control_frame, text="Tham s·ªë m√¥ h√¨nh", font=("Segoe UI", 11, "bold"), bg="#F5F5F5").pack(anchor="w", pady=(5, 3))
        self.epsilon = self.add_param_slider(control_frame, "Epsilon", 0.05, 1.0, 0.1)
        self.delta = self.add_param_slider(control_frame, "Delta", 0.01, 1.0, 0.2)
        self.max_iter = self.add_param_entry(control_frame, "Max Iter", 50)
        self.tol = self.add_param_entry(control_frame, "Tolerance", 1e-4)
        self.n_beta = self.add_param_entry(control_frame, "N_Beta", 2)
        self.top_n = self.add_param_entry(control_frame, "Top N (l·ªçc ƒë·ªëi chi·∫øu)", 100)

        # N√∫t ch·ª©c nƒÉng
        tk.Button(control_frame, text="üöÄ Ch·∫°y m√¥ ph·ªèng", command=self.run_simulation, **BTN_STYLE).pack(fill="x", pady=(15, 4))
        tk.Button(control_frame, text="üíæ L∆∞u k·∫øt qu·∫£ CSV", command=self.save_result, **BTN_STYLE).pack(fill="x")
        tk.Button(control_frame, text="üîç ƒê·ªëi chi·∫øu OncoKB / PubMed", command=self.match_results, **BTN_STYLE).pack(fill="x", pady=4)
        tk.Button(control_frame, text="üì• L∆∞u k·∫øt qu·∫£ ƒë·ªëi chi·∫øu", command=self.save_matched, **BTN_STYLE).pack(fill="x")

        # Frame k·∫øt qu·∫£
        result_frame = tk.Frame(root, padx=10, pady=10)
        result_frame.pack(side=tk.RIGHT, fill=tk.BOTH, expand=True)

        tk.Label(result_frame, text="üìä K·∫øt qu·∫£ m√¥ ph·ªèng", font=("Segoe UI", 12, "bold")).pack(anchor="w")
        style = ttk.Style()
        style.configure("Treeview.Heading", font=("Segoe UI", 10, "bold"))
        style.configure("Treeview", font=("Segoe UI", 10))

        self.tree = ttk.Treeview(result_frame, show="headings")
        self.tree.pack(fill=tk.BOTH, expand=True)

    def add_param_slider(self, parent, name, from_, to, default):
        tk.Label(parent, text=f"{name}:", font=FONT, bg="#F5F5F5").pack(anchor="w")
        var = tk.DoubleVar(value=default)
        tk.Scale(parent, from_=from_, to=to, resolution=0.01, orient=tk.HORIZONTAL, variable=var).pack(fill="x")
        return var

    def add_param_entry(self, parent, name, default):
        tk.Label(parent, text=f"{name}:", font=FONT, bg="#F5F5F5").pack(anchor="w")
        var = tk.StringVar(value=str(default))
        tk.Entry(parent, textvariable=var, font=FONT).pack(fill="x")
        return var

    def choose_file(self):
        path = filedialog.askopenfilename(filetypes=[("Text files", "*.txt")])
        if path:
            self.network_path = path
            self.network_graph = import_network(path)
            self.file_label.config(text=os.path.basename(path))
            self.draw_btn.config(state=tk.NORMAL)

    def run_simulation(self):
        if not self.network_path:
            messagebox.showwarning("L·ªói", "Vui l√≤ng ch·ªçn file m·∫°ng.")
            return
        try:
            epsilon = float(self.epsilon.get())
            delta = float(self.delta.get())
            max_iter = int(self.max_iter.get())
            tol = float(self.tol.get())
            n_beta = int(self.n_beta.get())

            df = simulate(
                file_path=self.network_path,
                EPSILON=epsilon,
                DELTA=delta,
                MAX_ITER=max_iter,
                TOL=tol,
                N_BETA=n_beta,
                output_folder=None
            )
            self.result_df = df
            self.display_results(df)
        except Exception as e:
            messagebox.showerror("L·ªói m√¥ ph·ªèng", str(e))

    def display_results(self, df):
        for row in self.tree.get_children():
            self.tree.delete(row)

        self.tree["columns"] = list(df.columns)
        for col in df.columns:
            self.tree.heading(col, text=col)
            self.tree.column(col, width=150)

        for _, row in df.iterrows():
            tags = ("oncokb",) if "In OncoKB" in df.columns and row.get("In OncoKB", False) else ()
            self.tree.insert("", tk.END, values=list(row), tags=tags)

        self.tree.tag_configure("oncokb", background="#FFDDDD")

    def save_result(self):
        if self.result_df is None:
            messagebox.showwarning("Ch∆∞a c√≥ k·∫øt qu·∫£", "B·∫°n c·∫ßn ch·∫°y m√¥ ph·ªèng tr∆∞·ªõc.")
            return
        path = filedialog.asksaveasfilename(defaultextension=".csv")
        if path:
            self.result_df.to_csv(path, index=False)
            messagebox.showinfo("ƒê√£ l∆∞u", f"ƒê√£ l∆∞u k·∫øt qu·∫£ v√†o\n{path}")

    def save_matched(self):
        if self.matched_df is None:
            messagebox.showwarning("Ch∆∞a c√≥ ƒë·ªëi chi·∫øu", "B·∫°n c·∫ßn th·ª±c hi·ªán ƒë·ªëi chi·∫øu tr∆∞·ªõc.")
            return
        path = filedialog.asksaveasfilename(defaultextension=".csv")
        if path:
            self.matched_df.to_csv(path, index=False)
            messagebox.showinfo("ƒê√£ l∆∞u", f"ƒê√£ l∆∞u k·∫øt qu·∫£ ƒë·ªëi chi·∫øu v√†o\n{path}")

    def match_results(self):
        if self.result_df is None:
            messagebox.showwarning("Ch∆∞a c√≥ k·∫øt qu·∫£", "B·∫°n c·∫ßn ch·∫°y m√¥ ph·ªèng tr∆∞·ªõc.")
            return
        try:
            top_n = int(self.top_n.get()) if self.top_n.get().isdigit() else None
            matched = match_with_oncokb_pubmed(self.result_df, top_n=top_n)
            if matched.empty:
                messagebox.showinfo("ƒê·ªëi chi·∫øu", "Kh√¥ng t√¨m th·∫•y gene n√†o kh·ªõp v·ªõi OncoKB ho·∫∑c PubMed.")
            else:
                self.matched_df = matched
                self.display_results(matched)
        except Exception as e:
            messagebox.showerror("L·ªói ƒë·ªëi chi·∫øu", str(e))

    def draw_network(self):
        if self.network_graph is None:
            messagebox.showwarning("Ch∆∞a c√≥ m·∫°ng", "Vui l√≤ng ch·ªçn file m·∫°ng tr∆∞·ªõc.")
            return

        fig, ax = plt.subplots(figsize=(7, 6))
        pos = nx.spring_layout(self.network_graph, seed=42)
        nx.draw_networkx_nodes(self.network_graph, pos, node_size=20, node_color="#1f78b4", ax=ax)
        nx.draw_networkx_edges(self.network_graph, pos, edge_color="#cccccc", width=0.5, ax=ax)
        ax.set_title("Bi·ªÉu di·ªÖn m·∫°ng gene", fontsize=12)
        ax.axis("off")

        top = tk.Toplevel(self.root)
        top.title("Bi·ªÉu ƒë·ªì m·∫°ng")
        canvas = FigureCanvasTkAgg(fig, master=top)
        canvas.draw()
        canvas.get_tk_widget().pack(fill=tk.BOTH, expand=True)

if __name__ == "__main__":
    root = tk.Tk()
    app = SimulationApp(root)
    root.mainloop()
